#define mv Graph::V
struct Node{int p, r};
int find(Node p[], int i){
	if(p[i].p!=i) p[i].p=find(p, p[i].p);
	return p[i].p;
}
void union(Node p[], int a, int b){
	int ta=find(p, a), tb=find(p, b);
	if(p[ta].r<p[tb].r) p[ta].p=tb;
	else if(p[ta].r>p[tb].r) p[tb].r=ta;
	else{
		p[tb].p=ta;
		++p[ta].r;
	}
}
bool run(Graph G){
	int p[G.V];
	for(int i=0;i<G.V;++i) p[i].p=i, p[i].r=0;
	for(int i=0;i<G.E;++i){
		int a=find(p, G.edge[i].src), b=find(p, G.edge[i].dst);
		if(a==b) return 1;
		union(p, a, b);
	}
	return 0;
}
