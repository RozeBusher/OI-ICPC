/*********************************
Western rancher and gunslinger Jonah Hex doesn't like branding his cows, so he's opted for a new system involving labelling them with numbers!

While he's stopped the painful practice of branding, he has some other rules he enforces to keep his herd's size managed: 1) A cow may have up to 2 female children (the rest are sent to market to become veal!) 2) One child is branded with a number greater than it's parent, and the other with a number less than it's parent

In the past, Jonah hired prized bulls from other ranchers to "diversify the gene pool" of his cows.

This (ahem) "service" came at a significant cost to Jonah, but now he has an idea: Why not breed some of the distantly-related calves with each other to reduce costs?

What Jonah needs right now is the youngest ancestor shared by 2 cows to help determine whether their offspring could be bred and still produce genetically-diverse offspring.

Input Format

You will be provided a series of non-negative digits separated by spaces on the first line.

These digits represent cow labels in the lineage graph.

If you encounter a "-" (dash) character instead of a digit on the first line, then there exists no child at that point.

After the line containing a description of the family, you will receive number N.

M represents the number of pairs of cow labels that will follow.

Example Input Description of First Line:

5 3 8 1 4 - 9 - 2 -    (values of the labels - the actual input)
-------------------
0 1 2 3 4 5 6 7 8 9    (indices)
Important Properties of Node at index i

2*i + 1 // Index of the left child (should have lesser value)
2*i + 2	// Index of the right child (should have greater value)
Actual representation:

         5
       /   \
      3     8
     / \     \
    1   4     9
     \
      2
Input Description of Remaining Lines

5	// There will be 5 lines of cow pairs
1 2	
9 1
4 2
3 2
9 2
Constraints

1 <= number of cows <= 100
1 <= N <= 10000
You will always start with a single cow.

Output Format

You should output N lines with a single digit, which represents the label on the ancestor these 2 cows have in common.

If you encounter invalid input or one of the cows does not exist, simply return -1

Sample Input 0

5 3 8 1 4 - 9 - 2 -
5
1 2    
9 1
4 2
3 2
9 2
Sample Output 0

1
5
3
3
5
Sample Input 1

5 3 6 2 4 - -
3
5 5
2 2
9 9
Sample Output 1

5
2
-1
Explanation 1

For (5 5) and (2 2), the cows have the same parent.

For (9 9), there is no cow with the number 9, therefore the output is -1.

Sample Input 2

10 5 11 3 7 - 12 2 4 - 9
1
13 2
Sample Output 2

-1
Explanation 2

For (13 2), there is no cow with 13, so the result is -1.
*********************************/
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

#define left(x) (2*x+1)
#define right(x) (2*x+2)

vector<string> TR;
int root;

bool Inb(int i){
    return 0<=i&&i<TR.size();
}
int Val(int i){
    if(TR[i].compare("-")==0) return -1;
    else return stoi(TR[i]);
}
bool Exist(int i, int c){
    if(!Inb(i)) return false;
    int iv=Val(i);
    if(iv==c) return true;
    else if(iv>c){
        return Exist(left(i), c);
    }else{
        return Exist(right(i), c);
    }
}
int Search(int i, int a, int b){
    int iv=Val(i);
    bool sub=(a<iv&&iv<b)||(b<iv&&iv<a), in=(a==iv||b==iv), le=(a<iv&&b<iv);
    if(sub||in) return iv;
    else if(le) return Search(left(i), a, b);
    else return Search(right(i), a, b);
}

int Calc(int a, int b){
    if(!Exist(root, a)||!Exist(root, b)) return -1;
    if(a==b) return a;
    return Search(root, a, b);
}

int len;
char* nextWord(char *str){
    char *word=(char*)malloc(1024*sizeof(char)), ch;
    memset(word, '\0', 1024);
    int c=0;
    ch=str[len];
    while(ch!='\0'){
        if(ch!='\n'&&ch!='\r'&&ch!=' '){
            word[c++]=ch;
            ch=str[++len];
        }
        else{
            ++len;
            break;
        }
    }
    if(word[0]>32&&word[0]<123) return word;
    else return NULL;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    string s;
    getline(cin, s, '\n');
    char *cstr=strdup(s.c_str());
    if(!(strlen(cstr)>0)){
        printf("-1\n");
        return 0;
    }
    char *wd=nextWord(cstr);
    while(wd){
        TR.push_back(string(wd));
        wd=nextWord(cstr);
    }
    root=0;
    int n=-1;
    scanf("%d", &n);
    if(n<1||n>10000){
        printf("-1\n");
        return 0;
    }
    vector<int> rst;
    for(int i=0;i<n;++i){
        int a=-1;
        int b=-1;
        scanf("%d%d", &a, &b);
        /*if(a<1||a>10000||b<1||b>10000){
            printf("-1\n");
            continue;
        }*/
        printf("%d\n", Calc(a, b));
    }
    return 0;
}
