/***********************************
Maze runner is stuck in a maze and you need to help him find the most optimal path to get out. You need to print the minimum distance for going from a source to a destination. Remember that the maze runner can move in 4 directions- up, down, left, right.

Input Format

Input will be given in the form of a matrix where '1' will represent a possible path and '0' will represent a blocked path. The first line of input will contain 'M' and 'N', the number of rows and columns of the matrix respectively. The second line contains the source coordinates, 'x1' and 'y1'. The third line contains the destination coordinates, 'x2' and 'y2'. This is followed by M lines, with each containing N elements for the maze.

Constraints

0 < M, N < 200
Output Format

Just print out one number containing the minimum steps needed to reach the destination from the source. If there is no path possible, print "No route."

Sample Input 0

10 10
0 0
2 7
1 0 0 0 0 0 1 0 1 1 
1 0 0 0 1 0 0 0 1 1 
1 1 1 1 1 1 1 1 0 1 
1 1 0 0 1 0 0 1 1 1 
1 0 0 0 1 1 1 1 0 1 
1 1 0 1 0 0 1 1 0 0 
0 0 1 1 0 1 0 1 0 1 
1 0 0 0 1 0 1 1 1 1 
0 1 0 1 1 1 0 1 0 1 
0 0 0 0 0 0 0 1 1 1 
Sample Output 0

9
Sample Input 1

10 10
0 0
9 9
1 0 0 0 0 0 1 0 1 1 
1 0 0 0 1 0 0 0 1 1 
1 1 1 1 1 1 1 1 0 1 
1 1 0 0 1 0 0 1 1 1 
1 0 0 0 1 1 1 1 0 1 
1 1 1 1 0 0 1 1 0 0 
0 0 1 1 1 1 1 1 0 1 
1 0 0 0 1 0 1 1 1 1 
0 1 0 1 1 1 1 1 0 1 
0 0 0 0 0 1 1 1 1 1 
Sample Output 1

18
***********************************/
#include <queue>
#include <iostream>
using namespace std;
#define INF 0x3F3F3F3F
#define MAXN 205
struct Pt{
    int x, y;
};
struct Node{
    Pt p;
    int d;
};
int n, m, M[MAXN][MAXN], V[MAXN][MAXN], R[]={-1, 0, 0, 1}, C[]={0, -1, 1, 0};
Pt src, dst;
int Val(int r, int c){
    return r>=0&&r<n&&c>=0&&c<=m;
}
void BFS(){
    if(!M[src.x][src.y]||!M[dst.x][dst.y]){
        cout<<"No route.";
        return;
    }
    V[src.x][src.y]=1;
    queue<Node> Q;
    Node st={src, 0};
    Q.push(st);
    while(!Q.empty()){
        Node cur=Q.front();
        Pt tmp=cur.p;
        if(tmp.x==dst.x&&tmp.y==dst.y){
            cout<<cur.d;
            return;
        }
        Q.pop();
        for(int i=0;i<4;++i){
            int r=tmp.x+R[i], c=tmp.y+C[i];
            if(Val(r, c)&&M[r][c]&&!V[r][c]){
                V[r][c]=1;
                Node t={{r, c}, cur.d+1};
                Q.push(t);
            }
        }
    }
    cout<<"No route.";
}
int main() {
    cin>>n>>m>>src.x>>src.y>>dst.x>>dst.y;
    for(int i=0;i<n;++i) for(int j=0;j<m;cin>>M[i][j++]);
    BFS();
    return 0;
}
