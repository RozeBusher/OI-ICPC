/**************************************
Some candy manufacturers put stickers into candy bar packages. Bob and his friends are collecting these stickers. They all want as many different stickers as possible, but when they buy a candy bar, they don’t know which sticker is inside.

It happens that one person has duplicates of a certain sticker. Everyone trades duplicates for stickers he doesn’t possess. Since all stickers have the same value, the exchange ratio is always 1:1.

But Bob is clever: he has realized that in some cases it is good for him to trade one of his duplicate stickers for a sticker he already possesses.

Now assume, Bob’s friends will only exchange stickers with Bob, and they will give away only duplicate stickers in exchange with different stickers they don’t possess.

Can you help Bob and tell him the maximum number of different stickers he can get by trading stickers with his friends?

Input Format

The first line of input contains the number of cases T (T ≤ 20).

The first line of each case contains two integers n and m (2 ≤ n ≤ 10, 5 ≤ m ≤ 25). n is the number of people involved (including Bob), and m is the number of different stickers available.

The next n lines describe each person’s stickers; the first of these lines describes Bob’s stickers.

The i-th of these lines starts with a number ki ≤ 50 indicating how many stickers person i has.

Then follows ki numbers between 1 and m indicating which stickers person i possesses.

Constraints

(T ≤ 20)
(2 ≤ n ≤ 10, 5 ≤ m ≤ 25)
Output Format

For each case, print the test case number together with the maximum number of different stickers Bob can get.

Sample Input 0

2
2 5
6 1 1 1 1 1 1
3 1 2 2
3 5
4 1 2 1 1
3 2 2 2
5 1 3 4 4 3
Sample Output 0

Case #1: 1
Case #2: 3
Explanation 0

In the first case, no exchange is possible, therefore Bob can have only the sticker with number 1.

In the second case, Bob can exchange a sticker with number 1 against a sticker with number 2 of the second person, and then this sticker against a sticker with number 3 or 4 of the third person, and now he has stickers 1, 2 and 3 or 1, 2 and 4.
***************************************/
#include <iostream>
#include <cstring>
#include <queue>
using namespace std;
#define INF 0x3F3F3F3F
#define MIN(a, b) (a<b?a:b)
int C[40][40], F[40][40], TH[40], PR[40];
int main() {
    int T, Case = 1, N, M, K;
    scanf("%d", &T);
    while(T--) {
        scanf("%d %d", &N, &M);
        int tmp=N+M+1, rst=0;
        memset(C, 0, sizeof(C));
        memset(F, 0, sizeof(F));
        memset(TH, 0, sizeof(TH));
        memset(PR, 0, sizeof(PR));
        for(int i=1;i<=N;++i) {
            scanf("%d", &K);
            for(int j=1,k;j<=K;++j) {
                scanf("%d", &k);
                ++C[i][N+k];
            }
        }
        for(int i=2;i<=N;++i)
            for(int j=N+1;j<=N+M;++j)
                if(C[i][j]) --C[i][j];
                else C[j][i]=1;
        for(int i=N+1;i<=N+M;C[i++][tmp]=1);
        for(;1;memset(TH, 0, sizeof(TH))) {
            queue<int> Q;
            Q.push(1);
            TH[1]=INF;
            while(!Q.empty()&&!TH[tmp]) {
                int cur=Q.front();
                Q.pop();
                for(int nxt=1;nxt<=tmp;++nxt)
                    if(TH[nxt]==0&&C[cur][nxt]>F[cur][nxt]) {
                        Q.push(nxt);
                        PR[nxt]=cur;
                        TH[nxt]=MIN(TH[cur], C[cur][nxt]-F[cur][nxt]);
                    }
            }
            if(!TH[tmp]) break;
            for(int cur=tmp;cur!=1;cur=PR[cur]) F[PR[cur]][cur]+=TH[tmp], F[cur][PR[cur]]-=TH[tmp];
            rst+=TH[tmp];
        }
        printf("Case #%d: %d\n", Case++, rst);
    }
}
