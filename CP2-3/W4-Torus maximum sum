/*******************************************
A grid that wraps both horizontally and vertically is called a torus.

Given a torus where each cell contains an integer, determine the sub-rectangle with the largest sum. The sum of a sub-rectangle is the sum of all the elements in that rectangle. The grid below shows a torus where the maximum sub-rectangle has been shaded.


Input Format

The first line in the input contains the number of test cases (at most 18). Each case starts with an integer N (1 ≤ N ≤ 75) specifying the size of the torus (always square). Then follows N lines describing the torus, each line containing N integers between -100 and 100, inclusive.

Constraints

at most 18 test cases
1 ≤ N ≤ 75
Each number on matrix [-100, 100]
Output Format

For each test case, output a line containing a single integer: the maximum sum of a sub rectangle within the torus.

Sample Input 0

2
5
1 -1 0 0 -4
2 3 -2 -3 2
4 1 -1 5 0
3 -2 1 -3 2
-3 2 4 1 -4
3
1 2 3
4 5 6
7 8 9
Sample Output 0

15
45
*******************************************/
#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
#define MAXN 250
#define INF 0x3f3f3f3f
#define MAX(a, b) (a>b?a:b)
int mat[MAXN][MAXN], X[MAXN], Y[MAXN];
int main(){
    int N, n;
    scanf("%d", &N);
    while(N--) {
        scanf("%d", &n);
        for(int i=0;i<n;++i)
            for(int j=0;j<n;++j) {
                scanf ("%d", mat[i]+j);
                mat[i][j+n]=mat[i+n][j]=mat[i+n][j+n]=mat[i][j];
            }
        int rst=-INF;
        for(int i=0;i<n;++i)
            for(int j=0;j<n;++j) {
                memset(X, 0, sizeof(X));
                for(int x=i;x<i+n;++x)  
                    for(int y=j;y<j+n;++y) {
                        Y[y]=y==j?mat[x][y]:Y[y-1]+mat[x][y];
                        X[y]+=Y[y];    
                        rst=MAX(rst, Y[y]);
                        rst=MAX(rst, X[y]);
                    }
            }
        printf ("%d\n", rst);
    }
    return 0;
}
