/*************************************
The world is getting more evil and it's getting tougher to get into the Evil League of Evil. Since the legendary Bad Horse has retired, now you have to correctly answer the evil questions of Dr. Horrible, who has a PhD in horribleness (but not in Computer Science).

You are given an array of N elements, which are initially all 0. After that you will be given C commands. They are -

0 p q v - you have to add v to all numbers in the range of p to q (inclusive), where p and q are two indexes of the array.

1 p q - output a line containing a single integer which is the sum of all the array elements between p and q (inclusive)

Input Format

In the first line you'll be given T, number of test cases.

Each test case will start with N (N <= 100 000) and C (C <= 100 000). After that you'll be given C commands in the format as mentioned above.

Constraints

1 <= p, q <= N and 1 <= v <= 10^7

Output Format

Print the answers of the queries.

Sample Input 0

3
8 6
0 2 4 26
0 4 8 80
0 4 5 20
1 8 8 
0 5 7 14
1 4 8
80 6
0 4 5 20
1 8 8 
0 2 4 26
0 4 8 80
0 5 7 14
1 4 8
8 6
0 2 4 26
0 4 8 80
0 4 5 20
1 8 8 
0 5 7 14
1 4 8
Sample Output 0

80
508
0
508
80
508
Sample Input 1

1
8 6
0 2 4 26
0 4 8 80
0 4 5 20
1 8 8 
0 5 7 14
1 4 8
Sample Output 1

80
508
Sample Input 2

1
100000 10
0 2 1536 136
1 1 10000
0 5236 53625 2362605
1 1 10000
0 5236 53625 2362605
1 1 10000
0 5236 53625 2362605
1 1 10000
0 5236 53625 2362605
1 1 10000
0 123 2561 1223656
1 1 10000
0 123 2569 1223656
1 1 10000
0 123 2565 1223656
1 1 10000
0 123 2564 1223656
1 1 10000
1 2 16320
Sample Output 2

208760
11258021585
22515834410
33773647235
45031460060
Sample Input 3

2
8 6
0 2 4 26
0 4 8 80
0 4 5 20
1 8 8
0 5 7 14
1 4 8
8 16
0 1 2 10
1 1 4
0 3 4 1
1 1 4
0 3 5 2
1 1 8
0 1 8 2
1 7 8
0 6 8 2
1 6 8
0 8 8 1
1 6 8
0 1 8 2
1 4 4
1 3 3
1 3 4
Sample Output 3

80
508
20
22
28
4
12
13
7
7
14
******************************************/
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define ll long long
#define MAX 500000

ll LZ[MAX],TR[MAX];

void Update(ll n, ll st, ll en, ll i, ll j, ll v) {
    if(LZ[n]!=0) {
        TR[n]+=LZ[n];
        if(st!=en) {
            LZ[n*2+1]+=(LZ[n]/(en-st+1))*(((st+en)/2)-st+1);
            LZ[n*2+2]+=(LZ[n]/(en-st+1))*(en-((st+en)/2));
        }
        LZ[n]=0;
    }
    if(st>en||st>j||en<i) return;
    if(st>=i&&en<=j) {
        TR[n]+=v*(en-st+1);
        if(st!=en) {
            ll mid=(st+en)/2;
            LZ[n*2+1]+=v*(mid-st+1);
            LZ[n*2+2]+=v*(en-mid);
        }
        return;
    }
    ll mid=(st+en)/2;
    Update(n*2+1, st, mid, i, j, v);
    Update(n*2+2, mid+1, en, i, j, v);
    TR[n]=TR[n*2+1]+TR[n*2+2];
}

ll Query(ll n, ll st, ll en, ll i, ll j)
{
    if(st>en||st>j||en<i) return 0;
    if(LZ[n]!=0) {
        TR[n]+=LZ[n];
        if(st!=en) {
            LZ[n*2+1]+=(LZ[n]/(en-st+1))*(((st+en)/2)-st+1);
            LZ[n*2+2]+=(LZ[n]/(en-st+1))*(en-((st+en)/2));
        }
        LZ[n]=0;
    }
    if(st>=i&&en<=j) return TR[n];
    ll mid=(st+en)/2;
    ll q1=Query(n*2+1, st, mid, i, j), q2=Query(n*2+2, mid+1, en, i, j), rst=q1+q2;
    return rst;
}

int main()
{
    ll t;
    scanf("%lld", &t);
    while(t--) {
        ll n,c;
        for(ll i=0;i<MAX;++i){
            LZ[i]=TR[i]=0;
        }
        int key;
        scanf("%lld%lld", &n, &c);
        while(c--) {
            scanf("%d", &key);
            if(key==0) {
                ll x,y,v;
                scanf("%lld%lld%lld", &x, &y, &v);
                Update(0,0,n-1,x-1,y-1,v);
            } else {
                ll x,y;
                scanf("%lld%lld", &x, &y);
                printf("%lld\n", Query(0, 0, n-1, x-1, y-1));
            }    
        }
    }
    return 0;
}
