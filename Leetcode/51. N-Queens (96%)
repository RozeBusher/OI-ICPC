class Solution {
public:
    vector<vector<string> > solveNQueens(int n) {
        vector<vector<string> > rst;
        vector<int> pos(n, -1);
        dfs(pos, 0, rst);
        return rst;
    }
    void dfs(vector<int> &pos, int row, vector<vector<string> > &rst) {
        int n=pos.size();
        if (row==n){
            vector<string> out(n, string(n, '.'));
            for (int i=0;i<n;++i) out[i][pos[i]]='Q';
            rst.push_back(out);
        }else
            for(int col=0;col<n;++col)
                if (isValid(pos, row, col)){
                    pos[row]=col;
                    dfs(pos, row+1, rst);
                    pos[row]=-1;
                }
    }
    bool isValid(vector<int> &pos, int row, int col){
        for(int i=0;i<row;++i) if(col==pos[i]||abs(row-i)==abs(col-pos[i])) return 0;
        return 1;
    }
};
