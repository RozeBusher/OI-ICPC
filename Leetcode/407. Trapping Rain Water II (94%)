class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        if(heightMap.empty()) return 0;
        int m=heightMap.size(), n=heightMap[0].size(), rst=0, mx=INT_MIN, dir[4][2]={{0,-1},{-1,0},{0,1},{1,0}};
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for(int i=0;i<m;++i)
            for(int j=0;j<n;++j)
                if(!i||i==m-1||!j||j==n-1){
                    q.push({heightMap[i][j], i*n+j});
                    visited[i][j]=1;
                }
        while(!q.empty()){
            auto t=q.top(); 
            q.pop();
            int h=t.first, r=t.second/n, c=t.second%n;
            mx=max(mx, h);
            for(int i=0;i<4;++i){
                int x=r+dir[i][0], y=c+dir[i][1];
                if(x<0||x>=m||y<0||y>=n||visited[x][y]) continue;
                visited[x][y]=1;
                if (heightMap[x][y]<mx) rst+=mx-heightMap[x][y];
                q.push({heightMap[x][y], x*n+y});
            }
        }
        return rst;
    }
};
