class SummaryRanges {
    typedef struct Node{ int st, en; Node(int a, int b):st(a), en(b){} }Node;
    struct cmpN{ bool operator()(Node a, Node b) const { return a.st<b.st; } }; 
    struct cmpV{ bool operator()(vector<int> a, vector<int> b) const { return a[0]<b[0]; } };
    bool cmp(Node a, Node b) {return a.st<b.st;}
    set<Node, cmpN> rbt;
public:
    void addNum(int val) {
        auto itr=rbt.lower_bound(Node(val, val));
        int st=val, en=val;
        if(itr!=rbt.begin()&&(--itr)->en+1<val) ++itr;
        while(itr!=rbt.end()&&val+1>=itr->st&&val-1<=itr->en){
            st=min(st, itr->st);
            en=max(en, itr->en);
            itr=rbt.erase(itr);
        }
        rbt.insert(itr, {st, en});
    }
    vector<vector<int>> getIntervals() {
        vector<vector<int>> rst;
        for(auto itr:rbt) rst.push_back({itr.st, itr.en});
        return rst;
    }
};
