/**********************************
Naman has a chessboard of size . Each cell of the chessboard contains one of the following characters: <, >, ^, v, #. He also has two pawns.
< means that the pawn can only move to the left neighbor cell.
> means that the pawn can only move to the right neighbor cell.
^ means that the pawn can only move to the up neighbor cell.
v means that the pawn can only move to the down neighbor cell.
# means that the pawn will stop here.
Note that each cell can contain at most one pawn at any time, except for the # cell.
Initially Naman will place two pawns at some places and then start moving them simulaneously. He wants two pawns to move as much as possible. Help Naman find an optimal way to place the pawns so that they can move the maximum distance combined.

Input Format
The first line contains two integers n, m, the sizes of the chessboard.
The following lines contain the description of the board. Each character is only one of the characters <, >, ^, v, #.
It is guaranteed that the border cells are all #.

Constraints
1<=n,m<=2000

Output Format
If the pawns can legitmately move forever, output . Otherwise, output the maximum moves / distance by both pawns.

Sample Input 0
3 4
####
#>^#
####

Sample Output 0
3

Sample Input 1
3 4
####
#><#
####

Sample Output 1
-1

Sample Input 2
1 1
#

Sample Output 2
0
***********************************/
#include <bits/stdc++.h>
#define maxn 2005
#define INF 0x3f3f3f3f
#define ll long long
using namespace std; 
int n, m, k, rst, cnt, bf, dp[maxn][maxn], X[maxn*maxn], Y[maxn*maxn]; 
char G[maxn][maxn];
bool V[maxn][maxn];
int dfs(int a, int b){
    if(dp[a][b]!=-1) return dp[a][b];
    int t, mx=0;
    if(G[a][b]=='^'){
        if(V[a-1][b]) return INF;
        V[a-1][b]=1;
        t=dfs(a-1, b);
        V[a-1][b]=0;
    }else if(G[a][b]=='v'){
        if(V[a+1][b]) return INF;
        V[a+1][b]=1;
        t=dfs(a+1, b);
        V[a+1][b]=0;
    }else if(G[a][b]=='<'){
        if(V[a][b-1]) return INF;
        V[a][b-1]=1;
        t=dfs(a, b-1);
        V[a][b-1]=0;
    }else if(G[a][b]=='>'){
        if(V[a][b+1]) return INF;
        V[a][b+1]=1;
        t=dfs(a, b+1);
        V[a][b+1]=0;
    }else t=-1;
    dp[a][b]=t+1;
    return t+1;
}
void recur(int a,int b){
    if(G[a][b]=='#'){
        if(k) bf=1;
        return;
    }
    V[a][b]=1;
    if(G[a][b]=='^'&&!V[a-1][b]) recur(a-1, b);
    else if(G[a][b]=='v'&&!V[a+1][b]) recur(a+1, b);
    else if(G[a][b]=='<'&&!V[a][b-1]) recur(a, b-1);
    else if(G[a][b]=='>'&&!V[a][b+1]) recur(a, b+1);
}
void run(){
    int a=-1, t;
    cnt=0;
    memset(dp, -1, sizeof(dp));
    memset(V, 0, sizeof(V));
    for(int i=1;i<=n;++i)
        for(int j=1;j<=m;++j)
            if(G[i][j]-'#'){
                V[i][j]=1;
                t=dfs(i, j);
                V[i][j]=0;
                if(t>a){
                    a=t;
                    cnt=1;
                    X[cnt]=i, Y[cnt]=j;
                }else if(t==a){
                    ++cnt;
                    X[cnt]=i, Y[cnt]=j;
                }
                if(a>=INF){
                    rst=-1;
                    return;
                }
            }
    if(a==-1){
        rst=0;
        return;
    }
    memset(V, 0, sizeof(V));
    k=0;
    recur(X[1], Y[1]);
    bf=0, k=1;
    for(int i=2;i<=cnt;++i){
        recur(X[i], Y[i]);
        if(bf) break;
    }
    rst=2*a-1+bf;
}
int main(){
    while(cin>>n>>m){
        for(int i=1;i<=n;scanf("%s", G[i++]+1));
        run();
        cout<<rst<<endl;
    }
}
